#lang racket
(require racket/trace)

(define reverse
  (lambda (oldlst newlst)
    (cond
      [(null? oldlst) newlst]
      [else (reverse (cdddr oldlst) (cons (car oldlst) (cons (cadr oldlst) (cons (caddr oldlst) newlst))))])))

(define L '(5 8 6 4 2 5 6 8 9 7 5 2 6))
(trace reverse)
(reverse L '())